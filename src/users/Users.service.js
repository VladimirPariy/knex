const config = require("../database/knexConfig.js");const knex = require('knex')(config);const createRandomUser = require("../faker/faker");const {raw} = require("express");class UsersService {	getAll() {		return knex.select('*').from('users');	}	createNew() {		return knex.insert([createRandomUser()]).into('users');	}	patchOne(id, data) {		return knex('users').where({_id: id}).update(data);	}	deleteOne(id) {		return knex('users').where({_id: id}).del();	}	deleteAll() {		return knex('users').del();	}	batchInsert() {		const rows = [];		for (let i = 0; i < 1000; i++) {			rows.push(createRandomUser());		}		return knex.batchInsert('users', rows) // 3d arg - chunkSize			.returning('*');	}	async batchUpdate(data) {		const users = this.getAll();		return await knex.transaction(trx => {			const queries = [];			users.forEach(user => {				const query = knex('users')					.where('_id', user._id)					.update(data)					.transacting(trx);				queries.push(query);			});			Promise.all(queries)				.then(trx.commit)				.catch(trx.rollback);		});	}	usersOlderAvg() {		const calculatingAge = '(YEAR(NOW())-YEAR(birthday))';		const age = () => knex({sub_users: 'users'})			.select(knex.raw(calculatingAge))			.where('sub_users._id',				knex.raw('users._id'));		return knex.select("_id", "firstname", "lastName", "birthday", "sex", age().as('age'))			.from('users')			.where(knex.raw(`(${age()})`), '>',				knex('users')					.avg(knex.raw(`${calculatingAge}`)))		// SELECT _id, firstname, lastName, birthday, sex,		// 	(SELECT (YEAR(NOW())-YEAR(birthday)) FROM users AS sub_user WHERE sub_user._id=users._id) AS age,		// 	(SELECT  AVG(YEAR(NOW())-YEAR(birthday)) FROM users AS sub_user)as avg_age		// FROM users WHERE		// 	(SELECT (YEAR(NOW())-YEAR(birthday)) FROM users AS sub_user WHERE sub_user._id=users._id) >		// 	(SELECT  AVG(YEAR(NOW())-YEAR(birthday)) FROM users AS sub_user);	}}module.exports = new UsersService()